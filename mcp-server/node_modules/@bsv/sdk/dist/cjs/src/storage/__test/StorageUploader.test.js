"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const StorageUploader_js_1 = require("../StorageUploader.js");
const StorageUtils = __importStar(require("../StorageUtils.js"));
const WalletClient_js_1 = __importDefault(require("../../wallet/WalletClient.js"));
// A helper for converting a string to a number[] of UTF-8 bytes
function stringToUtf8Array(str) {
    return Array.from(new TextEncoder().encode(str));
}
describe('StorageUploader Tests', () => {
    let uploader;
    let walletClient;
    let globalFetchSpy;
    beforeEach(() => {
        walletClient = new WalletClient_js_1.default('json-api', 'non-admin.com');
        uploader = new StorageUploader_js_1.StorageUploader({
            storageURL: 'https://example.test.system',
            wallet: walletClient
        });
        globalFetchSpy = jest
            .spyOn(global, 'fetch')
            .mockResolvedValue(new Response(null, { status: 200 }));
    });
    afterEach(() => {
        jest.restoreAllMocks();
    });
    it('should upload a file, produce a valid UHRP URL, and decode it to the known SHA-256', async () => {
        const data = stringToUtf8Array('Hello, world!');
        // Mock out getUploadInfo so we can control the returned upload/public URLs
        jest.spyOn(uploader, 'getUploadInfo').mockResolvedValue({
            uploadURL: 'https://example-upload.com/put',
        });
        const result = await uploader.publishFile({
            file: {
                data,
                type: 'text/plain'
            },
            retentionPeriod: 7
        });
        // We expect exactly one PUT request
        expect(globalFetchSpy).toHaveBeenCalledTimes(1);
        // Check the result
        expect(StorageUtils.isValidURL(result.uhrpURL)).toBe(true);
        expect(result.published).toBe(true);
        const url = StorageUtils.getHashFromURL(result.uhrpURL);
        const firstFour = url.slice(0, 4).map(b => b.toString(16).padStart(2, '0')).join('');
        expect(firstFour).toHaveLength(8);
    });
    it('should throw if the upload fails with HTTP 500', async () => {
        // Force the fetch to fail
        globalFetchSpy.mockResolvedValueOnce(new Response(null, { status: 500 }));
        // Also mock getUploadInfo
        jest.spyOn(uploader, 'getUploadInfo').mockResolvedValue({
            uploadURL: 'https://example-upload.com/put',
        });
        const failingData = stringToUtf8Array('failing data');
        await expect(uploader.publishFile({
            file: {
                data: failingData,
                type: 'text/plain'
            },
            retentionPeriod: 30
        })).rejects.toThrow('File upload failed: HTTP 500');
    });
});
//# sourceMappingURL=StorageUploader.test.js.map