import { WalletInterface } from '../wallet/Wallet.interfaces.js';
export interface UploaderConfig {
    storageURL: string;
    wallet: WalletInterface;
}
export interface UploadableFile {
    data: number[];
    type: string;
}
export interface UploadFileResult {
    published: boolean;
    uhrpURL: string;
}
export declare class StorageUploader {
    private readonly authFetch;
    private readonly baseURL;
    constructor(config: UploaderConfig);
    private getUploadInfo;
    private uploadFile;
    /**
       * Publishes a file to the storage server with the specified retention period.
       *
       * This will:
       * 1. Request an upload URL from the server.
       * 2. Perform an HTTP PUT to upload the file’s raw bytes.
       * 3. Return a UHRP URL referencing the file once published.
       *
       * @param params.file - An object describing the file’s data (number[] array of bytes) and mime type.
       * @param params.retentionPeriod - Number of minutes to keep the file hosted.
       *
       * @returns An object indicating whether the file was published successfully and the resulting UHRP URL.
       *
       * @throws If either the upload info request or the subsequent file upload request fails (non-OK HTTP status).
       */
    publishFile(params: {
        file: UploadableFile;
        retentionPeriod: number;
    }): Promise<UploadFileResult>;
}
//# sourceMappingURL=StorageUploader.d.ts.map